---
/*
  MeteoWeather is a Accurate Weather App 
  Copyright (C) 2024 Mukul Kedia

  MeteoWeather is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as published
  by the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  MeteoWeather is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public License
  along with MeteoWeather. If not, see <https://www.gnu.org/licenses/>.
*/
---

<dialog id="settingsModal" class="z-50 overflow-x-hidden overflow-y-auto bg-gray-100 dark:bg-gray-900 rounded-lg p-0" aria-labelledby="dialog-aria-label">
  <header class="flex items-center justify-between p-4 bg-gray-200 dark:bg-gray-900 drop-shadow-lg">
    <h3 id="dialog-aria-label" class="text-xl font-semibold text-gray-900 dark:text-white">Settings</h3>
    <div class="w-5"></div>
    <button aria-label="Close Modal" data-close type="button" class="transition-all motion-reduce:transition-none text-gray-400 bg-transparent hover:bg-gray-300 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white">
      <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd">
        </path>
      </svg>
    </button>
  </header>

  { /* Gradient Line */ }
  <div class="h-1 bg-gradient-to-br from-pink-500 to-orange-400"></div>

  { /* Body */ }
  <section class="p-6 space-y-3 bg-white dark:bg-gray-800">
    <h3 class="text-lg font-medium text-gray-900 dark:text-white">Location:</h3>
    <div class="flex gap-2 h-10">
      <input inputmode="numeric" id="lat" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Latitude">
      <input inputmode="numeric" id="lon" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Longitude">
      <button class="flex h-full gap-4 items-center text-gray-900 bg-white border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-200 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700" id="detect" type="button">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" class="h-4 w-4"><path fill="currentColor" d="M256 0c17.7 0 32 14.3 32 32V66.7C368.4 80.1 431.9 143.6 445.3 224H480c17.7 0 32 14.3 32 32s-14.3 32-32 32H445.3C431.9 368.4 368.4 431.9 288 445.3V480c0 17.7-14.3 32-32 32s-32-14.3-32-32V445.3C143.6 431.9 80.1 368.4 66.7 288H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H66.7C80.1 143.6 143.6 80.1 224 66.7V32c0-17.7 14.3-32 32-32zM128 256a128 128 0 1 0 256 0 128 128 0 1 0 -256 0zm128-80a80 80 0 1 1 0 160 80 80 0 1 1 0-160z"/></svg>
      </button>
    </div>
    <br />
    <h3 class="text-lg font-medium text-gray-900 dark:text-white">Temperature Units:</h3>
    <ul class="grid w-full gap-6 md:grid-cols-2">
      <li>
        <input type="radio" id="fahrenheit" name="temp" value="fahrenheit" class="hidden peer" required>
        <label for="fahrenheit" class="inline-flex items-center justify-between w-full -mb-10 p-3 sm:p-5 sm:mb-auto text-black dark:text-white border border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 peer-checked:text-white bg-gradient-to-br peer-checked:from-pink-500 peer-checked:to-orange-400 hover:bg-gray-100 dark:bg-gray-800 dark:hover:bg-gray-700 peer-checked:shadow-lg peer-checked:hover:brightness-95">
          <div class="block">
            <div class="w-full text-lg font-semibold">Fahrenheit</div>
            <div class="hidden sm:block w-full">The Imperial System</div>
          </div>
        </label>
      </li>
      <li>
        <input type="radio" id="celsius" name="temp" value="celsius" class="hidden peer">
        <label for="celsius" class="inline-flex items-center justify-between w-full -mb-10 p-3 sm:p-5 sm:mb-auto text-black dark:text-white border border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 peer-checked:text-white bg-gradient-to-br peer-checked:from-pink-500 peer-checked:to-orange-400 hover:bg-gray-100 dark:bg-gray-800 dark:hover:bg-gray-700 peer-checked:shadow-lg peer-checked:hover:brightness-95">
          <div class="block">
            <div class="w-full text-lg font-semibold">Celsius</div>
            <div class="hidden sm:block w-full">The Metric System</div>
          </div>
        </label>
      </li>
    </ul>
    <br />
    <h3 class="text-lg font-medium text-gray-900 dark:text-white">Windspeed Units:</h3>
    <ul class="grid w-full gap-6 md:grid-cols-2">
      <li>
        <input type="radio" id="mph" name="wind" value="mph" class="hidden peer">
        <label for="mph" class="inline-flex items-center justify-between w-full -mb-10 p-3 sm:p-5 sm:mb-auto text-black dark:text-white border border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 peer-checked:text-white bg-gradient-to-br peer-checked:from-pink-500 peer-checked:to-orange-400 hover:bg-gray-100 dark:bg-gray-800 dark:hover:bg-gray-700 peer-checked:shadow-lg peer-checked:hover:brightness-95">
          <div class="block">
            <div class="w-full text-lg font-semibold">MPH</div>
            <div class="hidden sm:block w-full">The Imperial System</div>
          </div>
        </label>
      </li>
      <li>
        <input type="radio" id="kmh" name="wind" value="kmh" class="hidden peer" required>
        <label for="kmh" class="inline-flex items-center justify-between w-full -mb-10 p-3 sm:p-5 sm:mb-auto text-black dark:text-white border border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 peer-checked:text-white bg-gradient-to-br peer-checked:from-pink-500 peer-checked:to-orange-400 hover:bg-gray-100 dark:bg-gray-800 dark:hover:bg-gray-700 peer-checked:shadow-lg peer-checked:hover:brightness-95">
          <div class="block">
            <div class="w-full text-lg font-semibold">KMH</div>
            <div class="hidden sm:block w-full">The Metric System</div>
          </div>
        </label>
      </li>
    </ul>
    <br />
    <h3 class="text-lg font-medium text-gray-900 dark:text-white">Precipitation Units:</h3>
    <ul class="grid w-full gap-6 md:grid-cols-2">
      <li>
        <input type="radio" id="inch" name="precip" value="inch" class="hidden peer" required>
        <label for="inch" class="inline-flex items-center justify-between w-full -mb-10 p-3 sm:p-5 sm:mb-auto text-black dark:text-white border border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 peer-checked:text-white bg-gradient-to-br peer-checked:from-pink-500 peer-checked:to-orange-400 hover:bg-gray-100 dark:bg-gray-800 dark:hover:bg-gray-700 peer-checked:shadow-lg peer-checked:hover:brightness-95">
          <div class="block">
            <div class="w-full text-lg font-semibold">Inches</div>
            <div class="hidden sm:block w-full">The Imperial System</div>
          </div>
        </label>
      </li>
      <li>
        <input type="radio" id="mm" name="precip" value="mm" class="hidden peer">
        <label for="mm" class="inline-flex items-center justify-between w-full -mb-10 p-3 sm:p-5 sm:mb-auto text-black dark:text-white border border-gray-200 rounded-lg cursor-pointer dark:hover:text-gray-300 dark:border-gray-700 peer-checked:text-white bg-gradient-to-br peer-checked:from-pink-500 peer-checked:to-orange-400 hover:bg-gray-100 dark:bg-gray-800 dark:hover:bg-gray-700 peer-checked:shadow-lg peer-checked:hover:brightness-95">
          <div class="block">
            <div class="w-full text-lg font-semibold">Milimetters</div>
            <div class="hidden sm:block w-full">The Metric System</div>
          </div>
        </label>
      </li>
    </ul>
    <br />
  </section>

  { /* Gradient Line */ }
  <div class="h-1 bg-gradient-to-br from-pink-500 to-orange-400"></div>

  <footer class="flex place-content-between p-6 space-x-2 rounded-b bg-gray-200 dark:bg-gray-900">
    <button type="button" data-close class="hover:brightness-110 transition-all motion-reduce:transition-none shadow-sm shadow-red-400 text-white bg-gradient-to-br from-pink-500 to-orange-400 font-medium rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2">Cancel</button>
    <button type="button" data-save class="hover:brightness-110 transition-all motion-reduce:transition-none shadow-sm shadow-red-400 text-white bg-gradient-to-br from-pink-500 to-orange-400 font-medium rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2">Save</button>
  </footer>
</dialog>

<style>
  dialog[open] {
    animation: show 0.2s ease normal;
  }

  dialog::backdrop {
    backdrop-filter: blur(5px) brightness(90%);
  }

  @keyframes show {
    from {
      transform: translateY(5%);
    }
  }
</style>

<script>
  function setup() {
    const dialog = document.getElementById("settingsModal") as HTMLDialogElement,
      closeButtons = document.querySelectorAll("[data-close]"),

      fahrenheitCheckBox = document.getElementById("fahrenheit") as HTMLInputElement,
      celsiusCheckBox = document.getElementById("celsius") as HTMLInputElement,
      mphCheckBox = document.getElementById("mph") as HTMLInputElement,
      kmhCheckBox = document.getElementById("kmh") as HTMLInputElement,
      inchCheckBox = document.getElementById("inch") as HTMLInputElement,
      mmCheckBox = document.getElementById("mm") as HTMLInputElement,

      detectButton = document.getElementById("detect")!,
      lat = document.getElementById("lat") as HTMLInputElement,
      lon = document.getElementById("lon") as HTMLInputElement;

    for (const button of closeButtons) {
      button.addEventListener("click", () => {
      const keyFrame = new KeyframeEffect(
        dialog, 
        [{ translate: "0 5%"}], 
        { duration: 100, easing: "ease", direction: "normal" }
      ),
        animation = new Animation(keyFrame, document.timeline);

      animation.play();
      animation.onfinish = () => dialog.close();

        // Set Buttons after Modal closed
        setTimeout(() => {
          if (localStorage.getItem("temp")) {
            if (localStorage.getItem("temp") === "fahrenheit") fahrenheitCheckBox.checked = true;
            else celsiusCheckBox.checked = true;
          } else {
            fahrenheitCheckBox.checked = true;
            localStorage.setItem("temp", "fahrenheit");
          };

          if (localStorage.getItem("wind")) {
            if (localStorage.getItem("wind") === "mph") mphCheckBox.checked = true;
            else kmhCheckBox.checked = true;
          } else {
            mphCheckBox.checked = true;
            localStorage.setItem("wind", "mph");
          };

          if (localStorage.getItem("precip")) {
            if (localStorage.getItem("precip") === "inch") inchCheckBox.checked = true;
            else mmCheckBox.checked = true;
          } else {
            inchCheckBox.checked = true;
            localStorage.setItem("precip", "inch");
          };

          if ("lat" in localStorage) lat.value = localStorage.getItem("lat")!;
          if ("lon" in localStorage) lon.value = localStorage.getItem("lon")!;
        }, 150)
      });
    };

    const saveButton = document.querySelector("[data-save]")!;

    saveButton.addEventListener("click", () => {
      const keyFrame = new KeyframeEffect(
        dialog, 
        [{ translate: "0 5%"}], 
        { duration: 100, easing: "ease", direction: "normal" }
      ),
        animation = new Animation(keyFrame, document.timeline);

      animation.play();
      animation.onfinish = () => dialog.close();

      // Set LocalStorage
      const temperatureBoxChecked = document.querySelector("input[name='temp']:checked") as HTMLInputElement,
        windSpeedBoxChecked = document.querySelector("input[name='wind']:checked") as HTMLInputElement,
        precipitationBoxChecked = document.querySelector("input[name='precip']:checked") as HTMLInputElement;

      if (typeof temperatureBoxChecked !== "undefined" && temperatureBoxChecked) localStorage.setItem("temp", temperatureBoxChecked.value);
      else localStorage.setItem("temp", "fahrenheit");

      if (typeof windSpeedBoxChecked !== "undefined" && windSpeedBoxChecked) localStorage.setItem("wind", windSpeedBoxChecked.value);
      else localStorage.setItem("wind", "mph");

      if (typeof precipitationBoxChecked !== "undefined" && precipitationBoxChecked) localStorage.setItem("precip", precipitationBoxChecked.value);
      else localStorage.setItem("precip", "inch");

      localStorage.setItem("lat", lat.value);
      localStorage.setItem("lon", lon.value);
    });

    // Set Buttons
    if (localStorage.getItem("temp")) {
      if (localStorage.getItem("temp") === "fahrenheit") fahrenheitCheckBox.checked = true;
      else celsiusCheckBox.checked = true;
    } else {
      fahrenheitCheckBox.checked = true;
      localStorage.setItem("temp", "fahrenheit");
    };

    if (localStorage.getItem("wind")) {
      if (localStorage.getItem("wind") === "mph") mphCheckBox.checked = true;
      else kmhCheckBox.checked = true;
    } else {
      mphCheckBox.checked = true;
      localStorage.setItem("wind", "mph");
    };

    if (localStorage.getItem("precip")) {
      if (localStorage.getItem("precip") === "inch") inchCheckBox.checked = true;
      else mmCheckBox.checked = true;
    } else {
      inchCheckBox.checked = true;
      localStorage.setItem("precip", "inch");
    };

    // Location
    if ("lat" in localStorage) lat.value = localStorage.getItem("lat")!;
    if ("lon" in localStorage) lon.value = localStorage.getItem("lon")!;

    if (!("lat" in localStorage) || !("lon" in localStorage)) dialog.showModal();

    detectButton.addEventListener("click", () => {
      navigator.geolocation.getCurrentPosition((position) => {
        lat.value = position.coords.latitude.toString();
        lon.value = position.coords.longitude.toString();
      });
    });
  }

  setup();
  document.addEventListener("astro:after-swap", setup);
</script>