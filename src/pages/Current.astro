---
import Layout from "@layouts/Layout.astro"
import Nav from "@components/Nav.astro"
import Footer from "@components/Footer.astro"

import { Picture } from "astro:assets"

import Clear from "@assets/Clear.webp"
---

<Layout title="Current Weather">
	<Nav />
	<main class="absolute w-screen h-screen grid place-items-center">
		<div class="flex flex-col items-center rounded-lg shadow">
			<Picture src={ Clear } alt="Weather Image" class="object-cover w-full md:w-1/2 h-1/2 md:h-full" />
			<div class="flex flex-col justify-between p-4 leading-normal">
				<h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">Noteworthy technology acquisitions 2021</h5>
				<p class="mb-3 font-normal text-gray-700 dark:text-gray-400">Here are the biggest enterprise technology acquisitions of 2021 so far, in reverse chronological order.</p>
			</div>
		</div>
	</main>
	<Footer />
</Layout>

<script>
	import { fetchWeatherApi } from "openmeteo";

	async function setup() {
		/*
		const params = {
			latitude: localStorage.getItem("lat"),
			longitude: localStorage.getItem("lon"),
			hourly: [
				"temperature_2m",
				"apparent_temperature",
				"precipitation",
				"wind_speed_10m",
				"wind_direction_10m"
			],
			temperature_unit: localStorage.getItem("temp"),
			wind_speed_unit: localStorage.getItem("wind"),
			precipitation_unit: localStorage.getItem("precip"),
			forecast_days: 1,
			forecast_hours: 1,
			models: [
				"icon_seamless",
				"icon_global",
				"icon_eu",
				"icon_d2",
				"gfs_seamless",
				"gfs025",
				"gfs05",
				"ecmwf_ifs04",
				"ecmwf_ifs025",
				"gem_global",
				"bom_access_global_ensemble"
			]
		};

		const url = "https://ensemble-api.open-meteo.com/v1/ensemble";
		const responses = await fetchWeatherApi(url, params);

		let time;
		const averagedData: Record<string, number> = {};

		const promises = responses.map(async (response) => {
			const utcOffsetSeconds = response.utcOffsetSeconds();
			const hourly = await response.hourly()!;
			time = new Date(Number(hourly.time().valueOf()) + utcOffsetSeconds * 1000);

			params.hourly.forEach((paramKey, index) => {
				const valuesArray = hourly.variables(index)!.valuesArray()!;

				const average = calculateAverage(Array.from(valuesArray));
				averagedData[paramKey] = average;
			});
		});

		await Promise.all(promises);

		console.table([time, averagedData.temperature_2m, averagedData.apparent_temperature, averagedData.precipitation, averagedData.wind_speed_10m, averagedData.wind_direction_10m]);
		*/
		
	}

	function calculateAverage(arr: number[]) {
		return arr.reduce((acc, val) => acc + val, 0) / arr.length;
	}

	setup();
	document.addEventListener("astro:after-swap", () => {
		if (window.location.pathname === "/Current") setup();
	});
</script>
